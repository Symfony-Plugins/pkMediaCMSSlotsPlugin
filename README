= pkMediaCMSSlotsPlugin =

== Requirements ==

* pkMediaPlugin, of course
* pkContextCMSPlugin, of course
* All of their requirements.

== Installation ==

Enable the pkContextCMSImage, pkContextCMSSlideshow and pkContextCMSVideo 
modules, add those slot types to the allowed slots in your pkContextCMS project,
and set the API key to be used when talking to pkMediaPlugin. 
Optionally you can also specify the site on which pkMediaPlugin
is running; if not, the current site will be used. Note that this
means that several instances of the CMS can share a single media
repository:

    all:
      pkContextCMS:
        slot_types:
          pkContextCMSImage: Image
          pkContextCMSSlideshow: Slideshow
          pkContextCMSVideo: Video
          ... other custom slot types here
        # Optional
        media_site: http://www.mymediasite.com
        # Required
        media_apikey: "yourapikey"

On the site where pkMediaPlugin is installed (which can be the
same site), you'll need to list the same API key:

    all:
      pkMedia:
        apikeys:
          - "yourapikey"

=== When pkMediaPlugin Is On A Separate Site ===

You don't necessarily have to run pkMediaPlugin and pkContextCMSPlugin
on the same site. A remote media repository will work just as well
as a local one. 

By default the pkMedia API will attempt to talk to pkMediaPlugin running
on the same site. You an change that like this in `app.yml`:

all:
  pkContextCMS:
    media_site: http://www.mymediasite.com


== Usage ==

Include an image slot or add one to a multiple-slot area in your
pkContextCMS site in the usual way. Then click "Choose Image" in
the slot to browse the media plugin. Select an image by clicking on it. 

Slideshow slots are similar. Include one in the usual way.
Then click "Choose Images" in the slot to browse the media plugin. Select 
photos by clicking on them. The selected photos appear at the top of the page 
and can be dragged and dropped into any desired order. When you return to the 
page, the photos will appear as a slideshow in which the user clicks to advance
to the next image. Users can also click more obvious "previous"
and "next" arrows.

Video slots work much like slideshow slots except that you select
a video rather than an image. 

Note that you can add new images and videos while in
selection mode. If the image or video you want is not in your
media repository yet, just upload it (for images) or search YouTube
(for videos).

You can control the width and height at which images are displayed
by passing the `width` and `height` parameters when you
include the slot. Other options are available as well.

For a single slot:

    <?php pk_context_cms_slot('sidebar',
      'pkContextCMSSlideshow',
      array('width' => 240, 'flexHeight' => true)) ?>

For an area (with options for other allowed slot types in the area as well):

    <?php pk_context_cms_area('sidebar',
      array(
        'allowed_types' => array('pkContextCMSRichText', 
          'pkContextCMSText', 
          'pkContextCMSImage',
          'pkContextCMSSlideshow', 
          'pkContextCMSVideo'),
        'type_options' => array(
          'pkContextCMSImage' => array('link' => url_for('@homepage'),
            'defaultImage' => '/images/defaultImage.png'),
          'pkContextCMSSlideshow' => array('width' => 240, 'flexHeight' => true),
          'pkContextCMSVideo' => array('width' => 240, 'flexHeight' => true),
          'pkContextCMSText' => array('multiline' => true),
          'pkContextCMSRichText' => array('tool' => 'Sidebar')))) ?>

Note the use of the `flexHeight` option to specify that the height of an
image, slideshow or video should scale to maintain its aspect ratio relative to
the specified width.

Also note the use of the `link` option to specify that the image slot should
be a link to the home page of the site. This allows image slots to be
used as navigation links. 

The `defaultImage` option, currently supported only by still image slots,
displays an alternate image URL if no image has been selected. This is useful
for still image slots because they are often used as site logos, which should
be clickable to reach the home page. Note that since the default image is
not accessed through the media plugin, it is not resized or cropped. You should
select a default image of a size that is already reasonable for your purposes.
In practice, you probably won't use this option except when preparing a
default skeleton for a site intended to be edited by others.

In addition to the parameters demonstrated above, you can also
pass a `constraints` parameter which ensures that the media plugin
will only allow the selection of images with certain characteristics:

    // Allow only the selection of images with a 4x3 aspect ratio
    // and a minimum width of 600 pixels
    <?php pk_context_cms_slot('sidebar',
      'pkContextCMSSlideshow',
      array('width' => 240, 'flexHeight' => true,
        'constraints' => array('minimum-width' => 60,
          'aspect-width' => 4, 'aspect-height' => 3))) ?>

`constraints` may contain the following values:

* When you pass `width` and `height`, only images with those exact
dimensions will be displayed.

* When you pass `minimum-width` and-or `minimum-height`, only images
with dimensions meeting those minimum criteria will be displayed.

* When you pass `aspect-width` and `aspect_height`, only images
with the specified aspect ratio will be displayed (example: passing
aspect-width=4 and aspect-height=3 displays only images with
a 4x3 aspect ratio). This is a powerful option because there is
usually no real need to require a fixed size due to the automatic
resizing capabilities of the plugin. Instead, specify the aspect
ratio and, to ensure adequate quality, specify the minimum width and height.

TODO: enforce these constraints again when the results come
back from the media plugin. 
In the meantime however the worst that can happen is that a determined 
user manages to select an image that does not have the required dimensions 
by manufacturing a bogus URL (we already ensure they have selected a 
valid image).
